<?xml version="1.0" encoding="utf-8"?>
<scxml version="1.0" xmlns="http://www.w3.org/2005/07/scxml" 
		xmlns:xi="http://www.w3.org/2001/XInclude"
		xmlns:ws="http://www.genesyslab.com/modules/ws"
		xmlns:queue="http://www.genesyslab.com/modules/queue"
		xmlns:dialog="http://www.genesyslab.com/modules/dialog"
		xmlns:session="http://www.genesyslab.com/modules/session"
		xmlns:ixn="http://www.genesyslab.com/modules/interaction"
		xmlns:classification="http://www.genesyslab.com/modules/classification"
		initial='_composer_noboot'
		profile="ecmascript"
		name="Survey">

	<!-- SCXML code generated by Composer 8.1.541.07 -->
	<!-- Diagram created/upgraded by Composer: Composer 8.1.541.07 -->
	<!-- Project version: 8.1.541.07 -->
	<!-- Diagram version: 1.0 CreatedOn:  -->
	<!-- Application Author:  -->
	<!-- Release Mode: false -->
	<!-- Use external events: true -->

	<final id="_composer_noboot">
		<onentry>
			<log expr="'This SCXML page cannot be executed as the first page of an application. The first page should always be the SCXML page generated from an Interaction Process Diagram (IPD).'" />
		</onentry>
	</final>
	<state id="_composer_entry" initial="$$_MY_PREFIX_$$.Entry1">
		<onentry>
			<log expr="'Running Survey workflow.'"/>
			<log expr="'Code Generated by Composer: 8.1.541.07.'"/>
			<log expr="'Diagram created/upgraded by Composer: Composer 8.1.541.07.'"/>
			<log expr="'Project version: 8.1.541.07.'"/>
			<log expr="'Diagram version: 1.0 CreatedOn: .'"/>
			<script>
				// have this diagram system context sharing the global system context.
				// values from parent context (IPD or calling workflow) are used.
				// also IPD system handlers will update _data.system.context and hence this diagram system variables.
				var system = _data.system.context;

				// declare variables for all blocks in the diagram.
				// actual initialization is done in the entry block so expression evaluation exceptions can be caught.
				// there must be NO error in this part. all variables have to be declared before any error is raised so we can safely execute any error branch in the application.
				var App_Entry1 = new Object();
				var varSurveyApiReqBody = undefined;
				var varSurveyApiToken = undefined;
				var varSurveyApiUrl = undefined;
				var varSurveyTemplateId = undefined;
				var varSurveyThkUrl = undefined;
				var varSurveyVoiceUrl = undefined;
				var varValue = undefined;
				var varSurveyPayload = undefined;
				var varReqId = undefined;
				var varHttpResp = undefined;
				var varHttpStatus = undefined;
				var varHttpResult = undefined;
				var App_Disconnect1 = new Object();
				var App_emsSetSurveyParam = new Object();
				var App_GetScore = new Object();
				var App_restSaveSurveyScore = new Object();
				var App_setRequestBody1 = new Object();
				var App_playThanks = new Object();
			</script>
		</onentry>
		
			
		<!-- This is the Entry1 State -->
		<state id="Entry1">
			<onentry>
				<log expr="_sessionid + ': Inside Entry Block: Entry1'"/>
				<script>
					// update the system and user variables with values set by the user in the variables dialog
					system.diagram = 'Survey';
					system.BaseURL = getBaseURL();
					system.RelativePathURL = getRelativePathURL();
					system.Language = 'en-US';
					system.LastErrorEvent = 'undefined';
					system.LastErrorEventName = 'undefined';
					system.LastErrorDescription = 'undefined';
					system.WebServiceStubbing = '0';
					system.TerminateIxnOnExit = 1;
					system.LastTargetComponentSelected = 'undefined';
					system.LastTargetObjectSelected = 'undefined';
					system.LastTargetSelected = 'undefined';
					system.LastVirtualQueueSelected = 'undefined';
					system.LastSubmitRequestId = 'undefined';
					system.OPM = getOPMParameters();
					system.OCS_RecordURI = getWorkflowRecordURI();
					system.OCS_URI = getWorkflowOCSURI();
					system.OCS_Record = getWorkflowOCSRecord();
					varSurveyApiReqBody = undefined;
					varSurveyApiToken = undefined;
					varSurveyApiUrl = 'https://wizdemo-api.wiz-solution.com/v1/apienpoint/genesys/submitivrsurvey';
					varSurveyTemplateId = undefined;
					varSurveyThkUrl = 'http://192.168.2.161/arm/1105115_pcmu.wav';
					varSurveyVoiceUrl = undefined;
					varValue = undefined;
					varSurveyPayload = undefined;
					varReqId = undefined;
					varHttpResp = undefined;
					varHttpStatus = undefined;
					varHttpResult = undefined;
				</script>
				<log expr="'RelativePathURL = ' + system.RelativePathURL" />
				<send event="'Entry1.done'">
    	<param name="resolveid" expr="_my_prefix"/>
    	</send>
			</onentry>
			<transition event="Entry1.done" cond="_event.data.resolveid == _my_prefix" target="$$_MY_PREFIX_$$.emsSetSurveyParam">
				<script>storeEvent("Entry1", _event);</script>
			</transition>
		</state>

		<!-- This is the Disconnect1 State -->
		<final id="Disconnect1">
			<onentry>
				<log expr="_sessionid + ': Inside Disconnect Block: Disconnect1'" />
				<ixn:terminate requestid="App_Disconnect1['requestid']" interactionid="system.InteractionID" reason="'Disconnect interaction'"/>
			</onentry>
		</final>

		<!-- This is the emsSetSurveyParam State -->
		<state id="emsSetSurveyParam">
			<onentry>
				<log expr="_sessionid + ': Inside Script Block: emsSetSurveyParam'"/>
				<script>
					(function(){
					try {
						// your code
						//Retrieve Userdata
						varSurveyVoiceUrl = getuData('SurveyVoiceUrl', system.InteractionID);
						varSurveyTemplateId = getuData('SurveyTemplateId', system.InteractionID);
						varSurveyApiToken = getuData('SurveyApiToken', system.InteractionID);
						varSurveyVoiceUrl = &quot;http://192.168.2.161/arm/1105015_pcmu.wav&quot;;
						if (isEmpty(varSurveyVoiceUrl) || isEmpty(varSurveyApiToken)) {
							throw new Error('Parameter is empty'); 
						}	
					} catch (err) {
						// error handling code
					}
					})();
				</script>
				<send event="'emsSetSurveyParam.script.done'">
    	<param name="resolveid" expr="_my_prefix"/>
    	</send>
			</onentry>
			<transition event="emsSetSurveyParam.script.done" cond="_event.data.resolveid== _my_prefix" target="$$_MY_PREFIX_$$.GetScore">
				<script>storeEvent("emsSetSurveyParam", _event);</script>
			</transition>
			<transition event="error" target="$$_MY_PREFIX_$$.playThanks">
				<log expr="'Composer Application: Survey Block: emsSetSurveyParam'" />
				<log expr="'ERROR: ' + _event.toSource()" />
				<script>
				<![CDATA[
					storeException("emsSetSurveyParam", _event);
				]]>
				</script>
			</transition>
		</state>

		
		<!-- This is the GetScore State -->
		<state id="GetScore">
			<onentry>
				<dialog:playandcollect interactionid="system.InteractionID" requestid="_data.pvLG" language="'English (US)'" device="system.ThisDN">
					<dialog:prompts type="ann">
						<dialog:prompt interrupt="true" text="varSurveyVoiceUrl"/>
					</dialog:prompts>
					<dialog:input clear="true"  total_timeout="0" digit_timeout="2" start_timeout="8" ignore_digits="'#'" term_digits="'*'" max_digits="1"/>
				</dialog:playandcollect>
	 		</onentry>
			<transition event="dialog.playandcollect.done" cond="_event.data.requestid==_data.pvLG" target="$$_MY_PREFIX_$$.setRequestBody1">
				<script>storeEvent("GetScore", _event);</script>
				<log expr="'PlayAndCollect done event received.'" />
				<log expr="'Event data :' + _event.data.digits" />
	        	<assign location="varInputValue" expr="_event.data.digits" />
	        	<log expr="'Data Assigned (varInputValue): ' + _event.data.digits" />
				<log expr="'PlayAndCollect finished'"/>
			</transition>
			<transition event="error.dialog.playandcollect" cond="_event.data.requestid==App_GetScore['requestid']" target="$$_MY_PREFIX_$$.playThanks">
				<log expr="'Composer Application: Survey Block: GetScore'" />
				<log expr="'ERROR: ' + _event.toSource()" />
				<script>
				<![CDATA[
					storeException("GetScore", _event);
				]]>
				</script>
			</transition>
		</state>
		

		<!-- This is the restSaveSurveyScore State -->
		<state id="restSaveSurveyScore">
			<onentry>
			    <log expr="_sessionid + ': Inside HTTPRest Block: restSaveSurveyScore'" />
				<log expr="'varSurveyApiReqBody - ' + varSurveyApiReqBody" level="2" />

				<script>
				 var customHeaders = new Object();
				 customHeaders["authorization"] = varSurveyApiToken;
    			</script>
				<session:fetch requestid="App_restSaveSurveyScore['requestid']"
					       srcexpr="varSurveyApiUrl" method="'post'" enctype="'application/json'" maxage="0"
					       maxstale="0" type="'application/json'" gdelivery="true" 
					       gd_retries="3" gd_retry_interval="5" timeout="10" headers="customHeaders">
				   <content _expr="varSurveyPayload"/>
				</session:fetch>
	  		</onentry>
			<transition event="session.fetch.done" cond="_event.data.requestid==App_restSaveSurveyScore['requestid']" target="$$_MY_PREFIX_$$.playThanks">
				<log expr="'Session FETCH  DONE'" />
				<log expr="'Composer Application:Survey Block: restSaveSurveyScore'" />
				<log expr="'Data Fetched:' + _event.data.content" />
				<script>storeEvent("restSaveSurveyScore", _event);</script>
				<script>App_restSaveSurveyScore['data'] = eval('(' + _event.data.content + ')');</script>
				<assign location="varHttpResult" expr="App_restSaveSurveyScore['data']" />
				<log expr="'Data Assigned: ' + varHttpResult.toSource()"/>
				<assign location="varHttpResp" expr="true"/>
				<assign location="varHttpStatus" expr="200"/>				
	    	</transition>
		</state>

		<!-- This is the setRequestBody1 State -->
		<state id="setRequestBody1">
			<onentry>
				<log expr="_sessionid + ': Inside Script Block: setRequestBody1'"/>
				<log expr="'Selected Score : ' + varInputValue" level="2" />
				<log expr="'Api token : ' + varSurveyApiToken" level="2" />
				<script>
					(function(){
						try {
							// your code
							varSurveyPayload  = new Object();
							varSurevyPayload.number = parseInt(varInputValue);
							varSurveyPayload.survey_temp_id = parseInt(varSurveyTemplateId);
							varSurveyPayload.phone = system.ANI;
							
							varSurveyApiReqBody = JSON.stringify({ number: parseInt(varInputValue), survey_temp_id: parseInt(varSurveyTemplateId), phone: system.ANI });		
						} catch (error) {
							// error handling code	
							varSurveyApiReqBody = &quot;{ \&quot;number\&quot;:&quot; + varInputValue + &quot;, \&quot;survey_temp_id\&quot;:&quot; + varSurveyTemplateId + &quot;,\&quot;phone\&quot;:\&quot;&quot; + system.ANI + &quot;\&quot;}&quot;;
						}
					})();
				</script>
				<send event="'setRequestBody1.script.done'">
    	<param name="resolveid" expr="_my_prefix"/>
    	</send>
			</onentry>
			<transition event="setRequestBody1.script.done" cond="_event.data.resolveid== _my_prefix" target="$$_MY_PREFIX_$$.restSaveSurveyScore">
				<script>storeEvent("setRequestBody1", _event);</script>
			</transition>
		</state>

		
		<!-- This is the playThanks State -->
		<state id="playThanks">
			<onentry>
				<log expr="'varHttpResp : ' + varHttpResp" level="2" />
	    		<dialog:play requestid="App_playThanks['requestid']" language="'English (US)'" interactionid="system.InteractionID">
		   			<dialog:prompts type="ann">
						<dialog:prompt interrupt="true" text="varSurveyThkUrl"/>
		   			</dialog:prompts>
	    		</dialog:play>
	 		</onentry>
			<transition event="dialog.play.done" cond="_event.data.requestid==App_playThanks['requestid']" target="$$_MY_PREFIX_$$.Disconnect1">
				<script>storeEvent("playThanks", _event);</script>
			</transition>
		</state>
		
	</state>
	
</scxml>
